import * as t from 'io-ts';
export declare const BinanceSocketOrderTypeIO: t.UnionC<[t.LiteralC<"LIMIT">, t.LiteralC<"MARKET">, t.LiteralC<"STOP_LOSS">, t.LiteralC<"STOP_LOSS_LIMIT">, t.LiteralC<"TAKE_PROFIT">, t.LiteralC<"TAKE_PROFIT_LIMIT">, t.LiteralC<"LIMIT_MAKER">]>;
export declare type BinanceSocketOrderType = t.TypeOf<typeof BinanceSocketOrderTypeIO>;
export declare const BinanceSocketSideIO: t.UnionC<[t.LiteralC<"SELL">, t.LiteralC<"BUY">]>;
export declare type BinanceSocketSide = t.TypeOf<typeof BinanceSocketSideIO>;
export declare const BinanceTimeInForceIO: t.UnionC<[t.LiteralC<"GTC">, t.LiteralC<"IOC">, t.LiteralC<"FOK">]>;
export declare type BinanceTimeInForce = t.TypeOf<typeof BinanceTimeInForceIO>;
export declare const BinanceIntervalIO: t.UnionC<[t.LiteralC<"1m">, t.LiteralC<"3m">, t.LiteralC<"5m">, t.LiteralC<"15m">, t.LiteralC<"30m">, t.LiteralC<"1h">, t.LiteralC<"2h">, t.LiteralC<"4h">, t.LiteralC<"6h">, t.LiteralC<"8h">, t.LiteralC<"12h">, t.LiteralC<"1d">, t.LiteralC<"3d">, t.LiteralC<"1w">, t.LiteralC<"1M">]>;
export declare type BinanceInterval = t.TypeOf<typeof BinanceIntervalIO>;
export declare const BinanceOrderResponseIO: t.TypeC<{
    symbol: t.StringC;
    orderId: t.NumberC;
    clientOrderId: t.StringC;
    transactTime: t.NumberC;
    price: t.StringC;
    origQty: t.StringC;
    executedQty: t.StringC;
    status: t.StringC;
    timeInForce: t.StringC;
    type: t.StringC;
    side: t.StringC;
}>;
export declare type BinanceOrderResponse = t.TypeOf<typeof BinanceOrderResponseIO>;
export declare const BinanceSocketAggregatedTradeIO: t.TypeC<{
    e: t.LiteralC<"aggTrade">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    s: t.StringC;
    a: t.BrandC<t.NumberC, t.IntBrand>;
    p: t.StringC;
    q: t.StringC;
    f: t.BrandC<t.NumberC, t.IntBrand>;
    l: t.BrandC<t.NumberC, t.IntBrand>;
    T: t.BrandC<t.NumberC, t.IntBrand>;
    m: t.BooleanC;
    M: t.BooleanC;
}>;
export declare type BinanceSocketAggregatedTrade = t.TypeOf<typeof BinanceSocketAggregatedTradeIO>;
export declare const BinanceSocketTradeIO: t.TypeC<{
    e: t.LiteralC<"trade">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    s: t.StringC;
    t: t.BrandC<t.NumberC, t.IntBrand>;
    p: t.StringC;
    q: t.StringC;
    b: t.BrandC<t.NumberC, t.IntBrand>;
    a: t.BrandC<t.NumberC, t.IntBrand>;
    T: t.BrandC<t.NumberC, t.IntBrand>;
    m: t.BooleanC;
    M: t.BooleanC;
}>;
export declare type BinanceSocketTrade = t.TypeOf<typeof BinanceSocketTradeIO>;
export declare const BinanceSocketKlineIO: t.TypeC<{
    e: t.LiteralC<"kline">;
    E: t.NumberC;
    s: t.StringC;
    k: t.TypeC<{
        t: t.NumberC;
        T: t.NumberC;
        s: t.StringC;
        i: t.UnionC<[t.LiteralC<"1m">, t.LiteralC<"3m">, t.LiteralC<"5m">, t.LiteralC<"15m">, t.LiteralC<"30m">, t.LiteralC<"1h">, t.LiteralC<"2h">, t.LiteralC<"4h">, t.LiteralC<"6h">, t.LiteralC<"8h">, t.LiteralC<"12h">, t.LiteralC<"1d">, t.LiteralC<"3d">, t.LiteralC<"1w">, t.LiteralC<"1M">]>;
        f: t.NumberC;
        L: t.NumberC;
        o: t.StringC;
        c: t.StringC;
        h: t.StringC;
        l: t.StringC;
        v: t.StringC;
        n: t.NumberC;
        x: t.BooleanC;
        q: t.StringC;
        V: t.StringC;
        Q: t.StringC;
        B: t.StringC;
    }>;
}>;
export declare type BinanceSocketKline = t.TypeOf<typeof BinanceSocketKlineIO>;
export declare const BinanceSocketMiniTickerIO: t.TypeC<{
    e: t.LiteralC<"24hrMiniTicker">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    s: t.StringC;
    c: t.StringC;
    o: t.StringC;
    h: t.StringC;
    l: t.StringC;
    v: t.StringC;
    q: t.StringC;
}>;
export declare type BinanceSocketMiniTicker = t.TypeOf<typeof BinanceSocketMiniTickerIO>;
export declare const BinanceSocketTickerIO: t.TypeC<{
    e: t.LiteralC<"24hrTicker">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    s: t.StringC;
    p: t.StringC;
    P: t.StringC;
    w: t.StringC;
    x: t.StringC;
    c: t.StringC;
    Q: t.StringC;
    b: t.StringC;
    B: t.StringC;
    a: t.StringC;
    A: t.StringC;
    o: t.StringC;
    h: t.StringC;
    l: t.StringC;
    v: t.StringC;
    q: t.StringC;
    O: t.BrandC<t.NumberC, t.IntBrand>;
    C: t.BrandC<t.NumberC, t.IntBrand>;
    F: t.BrandC<t.NumberC, t.IntBrand>;
    L: t.BrandC<t.NumberC, t.IntBrand>;
    n: t.BrandC<t.NumberC, t.IntBrand>;
}>;
export declare type BinanceSocketTicker = t.TypeOf<typeof BinanceSocketTickerIO>;
export declare const BinanceSocketBookTickerIO: t.TypeC<{
    u: t.BrandC<t.NumberC, t.IntBrand>;
    s: t.StringC;
    b: t.StringC;
    B: t.StringC;
    a: t.StringC;
    A: t.StringC;
}>;
export declare type BinanceSocketBookTicker = t.TypeOf<typeof BinanceSocketBookTickerIO>;
export declare const BinanceSocketPartialBookDepthIO: t.TypeC<{
    lastUpdateId: t.BrandC<t.NumberC, t.IntBrand>;
    bids: t.ArrayC<t.TupleC<[t.StringC, t.StringC]>>;
    asks: t.ArrayC<t.TupleC<[t.StringC, t.StringC]>>;
}>;
export declare type BinanceSocketPartialBookDepth = t.TypeOf<typeof BinanceSocketPartialBookDepthIO>;
export declare const BinanceSocketDiffDepthIO: t.TypeC<{
    e: t.LiteralC<"depthUpdate">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    s: t.StringC;
    U: t.BrandC<t.NumberC, t.IntBrand>;
    u: t.BrandC<t.NumberC, t.IntBrand>;
    b: t.ArrayC<t.TupleC<[t.StringC, t.StringC]>>;
    a: t.ArrayC<t.TupleC<[t.StringC, t.StringC]>>;
}>;
export declare type BinanceSocketDiffDepth = t.TypeOf<typeof BinanceSocketDiffDepthIO>;
export declare const BinanceSocketAccountUpdateIO: t.TypeC<{
    e: t.LiteralC<"outboundAccountPosition">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    u: t.BrandC<t.NumberC, t.IntBrand>;
    B: t.ArrayC<t.TypeC<{
        a: t.StringC;
        f: t.StringC;
        l: t.StringC;
    }>>;
}>;
export declare type BinanceSocketAccountUpdate = t.TypeOf<typeof BinanceSocketAccountUpdateIO>;
export declare const BinanceSocketBalanceUpdateIO: t.TypeC<{
    e: t.LiteralC<"balanceUpdate">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    a: t.StringC;
    d: t.StringC;
    T: t.BrandC<t.NumberC, t.IntBrand>;
}>;
export declare type BinanceSocketBalanceUpdate = t.TypeOf<typeof BinanceSocketBalanceUpdateIO>;
export declare const BinanceSocketExecutionTypeIO: t.UnionC<[t.LiteralC<"NEW">, t.LiteralC<"CANCELED">, t.LiteralC<"REPLACED">, t.LiteralC<"TRADE">, t.LiteralC<"EXPIRED">]>;
export declare type BinanceSocketExecutionType = t.TypeOf<typeof BinanceSocketExecutionTypeIO>;
export declare const BinanceSocketOrderStatusIO: t.UnionC<[t.LiteralC<"NEW">, t.LiteralC<"PARTIALLY_FILLED">, t.LiteralC<"FILLED">, t.LiteralC<"CANCELLED">, t.LiteralC<"PENDING_CANCEL">, t.LiteralC<"REJECTED">, t.LiteralC<"EXPIRED">]>;
export declare type BinanceSocketOrderStatus = t.TypeOf<typeof BinanceSocketOrderStatusIO>;
export declare const BinanceSocketOrderUpdateIO: t.TypeC<{
    e: t.LiteralC<"executionReport">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    s: t.StringC;
    c: t.StringC;
    S: t.UnionC<[t.LiteralC<"SELL">, t.LiteralC<"BUY">]>;
    o: t.UnionC<[t.LiteralC<"LIMIT">, t.LiteralC<"MARKET">, t.LiteralC<"STOP_LOSS">, t.LiteralC<"STOP_LOSS_LIMIT">, t.LiteralC<"TAKE_PROFIT">, t.LiteralC<"TAKE_PROFIT_LIMIT">, t.LiteralC<"LIMIT_MAKER">]>;
    f: t.UnionC<[t.LiteralC<"GTC">, t.LiteralC<"IOC">, t.LiteralC<"FOK">]>;
    q: t.StringC;
    p: t.StringC;
    P: t.StringC;
    F: t.StringC;
    g: t.BrandC<t.NumberC, t.IntBrand>;
    C: t.StringC;
    x: t.UnionC<[t.LiteralC<"NEW">, t.LiteralC<"CANCELED">, t.LiteralC<"REPLACED">, t.LiteralC<"TRADE">, t.LiteralC<"EXPIRED">]>;
    X: t.UnionC<[t.LiteralC<"NEW">, t.LiteralC<"PARTIALLY_FILLED">, t.LiteralC<"FILLED">, t.LiteralC<"CANCELLED">, t.LiteralC<"PENDING_CANCEL">, t.LiteralC<"REJECTED">, t.LiteralC<"EXPIRED">]>;
    r: t.StringC;
    i: t.BrandC<t.NumberC, t.IntBrand>;
    l: t.StringC;
    z: t.StringC;
    L: t.StringC;
    n: t.StringC;
    N: t.NullC;
    T: t.BrandC<t.NumberC, t.IntBrand>;
    t: t.BrandC<t.NumberC, t.IntBrand>;
    I: t.BrandC<t.NumberC, t.IntBrand>;
    w: t.BooleanC;
    m: t.BooleanC;
    M: t.BooleanC;
    O: t.BrandC<t.NumberC, t.IntBrand>;
    Z: t.StringC;
    Y: t.StringC;
    Q: t.StringC;
}>;
export declare type BinanceSocketOrderUpdate = t.TypeOf<typeof BinanceSocketOrderUpdateIO>;
export declare const BinanceSocketOCOListStatusIO: t.UnionC<[t.LiteralC<"RESPONSE">, t.LiteralC<"EXEC_STARTED">, t.LiteralC<"ALL_DONE">]>;
export declare type BinanceSocketOCOListStatus = t.TypeOf<typeof BinanceSocketOCOListStatusIO>;
export declare const BinanceSocketOCOListOrderStatusIO: t.UnionC<[t.LiteralC<"EXECUTING">, t.LiteralC<"ALL_DONE">, t.LiteralC<"REJECT">]>;
export declare type BinanceSocketOCOListOrderStatus = t.TypeOf<typeof BinanceSocketOCOListOrderStatusIO>;
export declare const BinanceSocketListStatusIO: t.TypeC<{
    e: t.LiteralC<"listStatus">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    s: t.StringC;
    g: t.BrandC<t.NumberC, t.IntBrand>;
    c: t.LiteralC<"OCO">;
    l: t.UnionC<[t.LiteralC<"RESPONSE">, t.LiteralC<"EXEC_STARTED">, t.LiteralC<"ALL_DONE">]>;
    L: t.UnionC<[t.LiteralC<"EXECUTING">, t.LiteralC<"ALL_DONE">, t.LiteralC<"REJECT">]>;
    r: t.StringC;
    C: t.StringC;
    T: t.BrandC<t.NumberC, t.IntBrand>;
    O: t.ArrayC<t.TypeC<{
        s: t.StringC;
        i: t.BrandC<t.NumberC, t.IntBrand>;
        c: t.StringC;
    }>>;
}>;
export declare type BinanceSocketListStatus = t.TypeOf<typeof BinanceSocketListStatusIO>;
export declare const BinanceSocketUserUpdateIO: t.UnionC<[t.TypeC<{
    e: t.LiteralC<"outboundAccountPosition">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    u: t.BrandC<t.NumberC, t.IntBrand>;
    B: t.ArrayC<t.TypeC<{
        a: t.StringC;
        f: t.StringC;
        l: t.StringC;
    }>>;
}>, t.TypeC<{
    e: t.LiteralC<"balanceUpdate">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    a: t.StringC;
    d: t.StringC;
    T: t.BrandC<t.NumberC, t.IntBrand>;
}>, t.TypeC<{
    e: t.LiteralC<"executionReport">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    s: t.StringC;
    c: t.StringC;
    S: t.UnionC<[t.LiteralC<"SELL">, t.LiteralC<"BUY">]>;
    o: t.UnionC<[t.LiteralC<"LIMIT">, t.LiteralC<"MARKET">, t.LiteralC<"STOP_LOSS">, t.LiteralC<"STOP_LOSS_LIMIT">, t.LiteralC<"TAKE_PROFIT">, t.LiteralC<"TAKE_PROFIT_LIMIT">, t.LiteralC<"LIMIT_MAKER">]>;
    f: t.UnionC<[t.LiteralC<"GTC">, t.LiteralC<"IOC">, t.LiteralC<"FOK">]>;
    q: t.StringC;
    p: t.StringC;
    P: t.StringC;
    F: t.StringC;
    g: t.BrandC<t.NumberC, t.IntBrand>;
    C: t.StringC;
    x: t.UnionC<[t.LiteralC<"NEW">, t.LiteralC<"CANCELED">, t.LiteralC<"REPLACED">, t.LiteralC<"TRADE">, t.LiteralC<"EXPIRED">]>;
    X: t.UnionC<[t.LiteralC<"NEW">, t.LiteralC<"PARTIALLY_FILLED">, t.LiteralC<"FILLED">, t.LiteralC<"CANCELLED">, t.LiteralC<"PENDING_CANCEL">, t.LiteralC<"REJECTED">, t.LiteralC<"EXPIRED">]>;
    r: t.StringC;
    i: t.BrandC<t.NumberC, t.IntBrand>;
    l: t.StringC;
    z: t.StringC;
    L: t.StringC;
    n: t.StringC;
    N: t.NullC;
    T: t.BrandC<t.NumberC, t.IntBrand>;
    t: t.BrandC<t.NumberC, t.IntBrand>;
    I: t.BrandC<t.NumberC, t.IntBrand>;
    w: t.BooleanC;
    m: t.BooleanC;
    M: t.BooleanC;
    O: t.BrandC<t.NumberC, t.IntBrand>;
    Z: t.StringC;
    Y: t.StringC;
    Q: t.StringC;
}>, t.TypeC<{
    e: t.LiteralC<"listStatus">;
    E: t.BrandC<t.NumberC, t.IntBrand>;
    s: t.StringC;
    g: t.BrandC<t.NumberC, t.IntBrand>;
    c: t.LiteralC<"OCO">;
    l: t.UnionC<[t.LiteralC<"RESPONSE">, t.LiteralC<"EXEC_STARTED">, t.LiteralC<"ALL_DONE">]>;
    L: t.UnionC<[t.LiteralC<"EXECUTING">, t.LiteralC<"ALL_DONE">, t.LiteralC<"REJECT">]>;
    r: t.StringC;
    C: t.StringC;
    T: t.BrandC<t.NumberC, t.IntBrand>;
    O: t.ArrayC<t.TypeC<{
        s: t.StringC;
        i: t.BrandC<t.NumberC, t.IntBrand>;
        c: t.StringC;
    }>>;
}>]>;
export declare type BinanceSocketUserUpdate = t.TypeOf<typeof BinanceSocketUserUpdateIO>;
